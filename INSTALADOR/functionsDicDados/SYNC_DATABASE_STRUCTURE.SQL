CREATE OR REPLACE FUNCTION comp.sync_database_structure()
  RETURNS text AS
$BODY$
DECLARE

COUNT_W NUMERIC;
SQL_INSTRUCTIONS_COUNT_W NUMERIC(10,0);
STARTTIME TIMESTAMP;
REC RECORD;
BEGIN

SELECT 	COUNT(1)
INTO	COUNT_W
FROM	PG_STAT_ACTIVITY
WHERE	POSITION('SYNC_DATABASE_STRUCTURE' IN UPPER(QUERY)) > 0
AND		UPPER(STATE) = 'ACTIVE';

IF (COUNT_W > 1) THEN
	RAISE EXCEPTION USING MESSAGE = COMP.GET_EXPRESSION_TEXT(35,APPLICATION_ID_W);
END IF;

SELECT 	COUNT(1)
INTO	COUNT_W
FROM	COMP.DATABASE_SCHEMA;

IF (COUNT_W < 2) THEN
	RAISE EXCEPTION USING MESSAGE = COMP.GET_EXPRESSION_TEXT(36,APPLICATION_ID_W);
END IF;

BEGIN
	EXECUTE 'DELETE FROM COMP.LOG_SYNCHRONIZER WHERE LEVEL <> 0';
	EXECUTE 'SELECT (COALESCE(MAX(ID),0)+1) FROM COMP.LOG_SYNCHRONIZER' INTO COUNT_W;
	EXECUTE 'ALTER SEQUENCE COMP.LOG_SYNC_SEQUENCE RESTART WITH ' || COUNT_W;
	
	DROP TABLE IF EXISTS TB_LOG;
	CREATE TEMP TABLE TB_LOG(ID SERIAL, ID_DATABASE_SCHEMA NUMERIC);


	STARTTIME := CLOCK_TIMESTAMP();

	FOR REC IN
		SELECT 	DISTINCT ID AS ID_APPLICATION 
		FROM 	COMP.APPLICATION
		WHERE	ID <> 2
	LOOP
		PERFORM COMP.DATABASE_SYNCHRONIZER(REC.ID_APPLICATION);
	END LOOP;	
	
	PERFORM COMP.WRITE_TEXT_LOG(1,NULL,CLOCK_TIMESTAMP() - STARTTIME,STARTTIME);
EXCEPTION WHEN unique_violation THEN
END;

SELECT 	COUNT(1)
INTO	SQL_INSTRUCTIONS_COUNT_W
FROM	COMP.LOG_SYNCHRONIZER;

RETURN COMP.RETURN_LOG_SYNC(2);

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
