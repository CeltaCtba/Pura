CREATE OR REPLACE FUNCTION comp.database_synchronizer(id_application numeric)
  RETURNS void AS
$BODY$
DECLARE

CUR_SCHEMA 	RECORD;
REC 		RECORD;
TEXT_W 		VARCHAR(400);
STARTTIME	TIMESTAMP;

BEGIN

FOR CUR_SCHEMA IN
	SELECT 	DISTINCT UPPER(TRIM(A.NAME)) SCHEMA_NAME, A.NR_ORDER, A.ID
	FROM	COMP.DATABASE_SCHEMA A
	WHERE	A.ID_APPLICATION = $1
	ORDER BY A.NR_ORDER
LOOP
	
	STARTTIME := CLOCK_TIMESTAMP();
	PERFORM COMP.SET_MASTER_LOG_ID(CUR_SCHEMA.ID);	
		
	FOR REC IN
		SELECT 	A.ID,
			(	SELECT 	COUNT(1) 
				FROM 	COMP.INTEGRITY C,
						COMP.INTEGRITY_ATTRIBUTE D,
						COMP.TABLE_ATTRIBUTE E
				WHERE	D.ID_INTEGRITY = C.ID
				AND		E.ID = D.ID_TABLE_ATTRIBUTE_ORIGIN
				AND		E.ID_TABLE = A.ID) CREATE_ORDER
		FROM 	COMP.SYSTEM_TABLE A
		WHERE	A.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND		UPPER(A.NAME) NOT IN 
			(	SELECT 		UPPER(B.TABLE_NAME)
				FROM		INFORMATION_SCHEMA.TABLES B
				WHERE		UPPER(B.TABLE_SCHEMA) = UPPER(CUR_SCHEMA.SCHEMA_NAME))
				ORDER BY 	CREATE_ORDER
	LOOP
		PERFORM COMP.CREATE_TABLE(REC.ID, $1, CUR_SCHEMA.SCHEMA_NAME);
	END LOOP;
	PERFORM COMP.WRITE_TEXT_LOG(2,60,CLOCK_TIMESTAMP() - STARTTIME, STARTTIME);
	
	

	STARTTIME := CLOCK_TIMESTAMP();
	PERFORM COMP.SET_MASTER_LOG_ID(CUR_SCHEMA.ID);	
	
	FOR REC IN
		SELECT	B.ID
		FROM 	COMP.SYSTEM_TABLE A,
				COMP.TABLE_ATTRIBUTE B
		WHERE	A.ID = B.ID_TABLE
		AND		A.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND		UPPER(A.NAME) IN 
			(	SELECT 		UPPER(C.TABLENAME)
				FROM		PG_TABLES C)
		AND	UPPER(B.NAME) NOT IN
			(	SELECT 	UPPER(D.COLUMN_NAME)
				FROM	INFORMATION_SCHEMA.COLUMNS D
				WHERE	UPPER(D.TABLE_SCHEMA) = CUR_SCHEMA.SCHEMA_NAME
				AND		UPPER(D.COLUMN_NAME) = UPPER(B.NAME)
				AND		UPPER(D.TABLE_NAME) = UPPER(A.NAME))
				ORDER BY A.NAME, B.NAME
	LOOP
		PERFORM COMP.CREATE_ATTRIBUTE(REC.ID, $1, CUR_SCHEMA.SCHEMA_NAME);
	END LOOP;
	PERFORM COMP.WRITE_TEXT_LOG(2,63,CLOCK_TIMESTAMP() - STARTTIME, STARTTIME);
	
	
	
	STARTTIME := CLOCK_TIMESTAMP();
	PERFORM COMP.SET_MASTER_LOG_ID(CUR_SCHEMA.ID);	

	FOR REC IN
		SELECT 	A.ID,
				COMP.GET_EXPRESSION_TEXT(F.ID_EXPRESSION, $1) AS TYPE,
				C.ID AS ID_SUP
		FROM 	COMP.SYSTEM_TABLE A,
			COMP.INTEGRITY C,
			COMP.INTEGRITY_ATTRIBUTE D,
			COMP.TABLE_ATTRIBUTE E,
			COMP.DOMAIN_VALUE F
		WHERE	D.ID_INTEGRITY = C.ID
		AND	E.ID = D.ID_TABLE_ATTRIBUTE_ORIGIN
		AND	E.ID_TABLE = A.ID
		AND	A.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND C.ID_DOMAIN_VALUE_TYPE = F.ID
		AND A.ID_APPLICATION = $1
		AND C.FL_ACTIVE IS TRUE 
		AND	C.NAME NOT IN 
		(	SELECT 	DISTINCT UPPER(XX.CONNAME)
			FROM  	PG_CATALOG.PG_CONSTRAINT XX,
					PG_NAMESPACE XY
			WHERE	XX.CONNAMESPACE = XY.OID
			AND		UPPER(XY.NSPNAME) = CUR_SCHEMA.SCHEMA_NAME)	
		AND C.NAME NOT IN 
		( 	SELECT DISTINCT UPPER(XY.INDEXNAME)
			FROM   PG_INDEXES XY   
			WHERE  UPPER(XY.SCHEMANAME) = CUR_SCHEMA.SCHEMA_NAME) 
		UNION 
		SELECT 	X.ID,
				'#INDEX' AS TYPE,
				Y.ID AS ID_SUP
		FROM 	COMP.TABLE_INDEX Y,
				COMP.SYSTEM_TABLE X
		WHERE	Y.ID_TABLE = X.ID
		AND		X.ID_APPLICATION = $1
		AND 	X.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND		Y.FL_ACTIVE IS TRUE
		AND 	Y.NAME NOT LIKE '%RDB$%'
		AND 	Y.NAME NOT LIKE 'FK%'
		AND 	Y.NAME NOT LIKE 'UNQ%'
		AND 	Y.NAME NOT LIKE 'PK%'
		AND		UPPER(Y.NAME) NOT IN (
			SELECT	DISTINCT UPPER(I.RELNAME)
			FROM	PG_CLASS I,
					PG_NAMESPACE NS
			WHERE	I.RELNAMESPACE = NS.OID
			AND		UPPER(NS.NSPNAME) = CUR_SCHEMA.SCHEMA_NAME)
		AND		UPPER(Y.NAME) NOT IN (
			SELECT	DISTINCT UPPER(AA.NAME)
			FROM	COMP.INTEGRITY AA)				
		GROUP BY 1,2,3
		ORDER BY 2 DESC
	LOOP
		IF (REC.TYPE = '#INDEX') THEN
			PERFORM COMP.CREATE_INDEXES(REC.ID, $1, CUR_SCHEMA.SCHEMA_NAME, REC.ID_SUP);
		ELSE
			PERFORM COMP.CREATE_INTEGRITY(REC.ID, $1, CUR_SCHEMA.SCHEMA_NAME, REC.ID_SUP);		
		END IF;
	END LOOP;
	PERFORM COMP.WRITE_TEXT_LOG(2,61,CLOCK_TIMESTAMP() - STARTTIME, STARTTIME);


	STARTTIME := CLOCK_TIMESTAMP();
	PERFORM COMP.SET_MASTER_LOG_ID(CUR_SCHEMA.ID);	

	FOR REC IN
		SELECT	B.ID,
				UPPER(COMP.GET_EXPRESSION_TEXT(F.ID_EXPRESSION, $1)) ATTRIBUTE_TYPE,
				B.NAME,
				D.COLUMN_NAME,
				B.FL_NOT_NULL REQUIRED,
				D.IS_NULLABLE,
				B.VL_DEFAULT DEFAULT_VALUE,
				COMP.CUT_SPECIAL_CHARACTERS(SUBSTRING(D.COLUMN_DEFAULT FROM 1 FOR (POSITION(':' IN D.COLUMN_DEFAULT)))) COLUMN_DEFAULT,
				UPPER(D.COLUMN_DEFAULT) COLUMN_DEFAULT_2,
				COALESCE(B.VL_ATTRIBUTE_SIZE,0) ATTRIBUTE_SIZE,
				COALESCE(D.CHARACTER_MAXIMUM_LENGTH,0) SYS_CHARACTER_MAXIMUM_LENGTH,
				COALESCE(D.NUMERIC_PRECISION,0) SYS_NUMERIC_PRECISION,
				COALESCE(B.VL_DECIMAL_SIZE,0) DECIMAL_SIZE,
				COALESCE(D.NUMERIC_SCALE,0) SYS_DECIMAL_SIZE
		FROM 	COMP.SYSTEM_TABLE A,
				COMP.TABLE_ATTRIBUTE B,
				PG_TABLES C,
				INFORMATION_SCHEMA.COLUMNS D,
				COMP.DOMAIN_VALUE F
		WHERE	A.ID = B.ID_TABLE
		AND		B.ID_DOMAIN_VALUE_TYPE = F.ID
		AND		A.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND		A.ID_APPLICATION = $1
		AND		UPPER(A.NAME) = UPPER(C.TABLENAME)
		AND		UPPER(A.NAME) = UPPER(D.TABLE_NAME)
		AND		UPPER(B.NAME) =	UPPER(D.COLUMN_NAME)
		AND		UPPER(D.TABLE_SCHEMA) = CUR_SCHEMA.SCHEMA_NAME
	LOOP
		IF (REC.ATTRIBUTE_TYPE = 'NUMERIC') THEN
			IF ((REC.ATTRIBUTE_SIZE <> REC.SYS_NUMERIC_PRECISION) OR (REC.DECIMAL_SIZE <> REC.SYS_DECIMAL_SIZE)) THEN
				PERFORM COMP.ALTER_ATTRIBUTE(REC.ID, 'NUMERIC SIZE', $1, CUR_SCHEMA.SCHEMA_NAME);
			END IF;
		ELSIF ((REC.REQUIRED IS TRUE AND REC.IS_NULLABLE = 'YES') OR (REC.REQUIRED IS FALSE AND REC.IS_NULLABLE = 'NO')) THEN
			PERFORM COMP.ALTER_ATTRIBUTE(REC.ID, 'REQUIRED', $1, CUR_SCHEMA.SCHEMA_NAME);
		ELSIF (REC.ATTRIBUTE_TYPE = 'VARCHAR') THEN
			IF (REC.ATTRIBUTE_SIZE <> REC.SYS_CHARACTER_MAXIMUM_LENGTH) THEN
				PERFORM COMP.ALTER_ATTRIBUTE(REC.ID, 'CHARACTER SIZE', $1, CUR_SCHEMA.SCHEMA_NAME);
			END IF;
		ELSIF ((REC.ATTRIBUTE_TYPE <> 'TIMESTAMP') AND (REC.ATTRIBUTE_TYPE <> 'DATE')) THEN
			IF (REC.ATTRIBUTE_TYPE = 'INTEGER') THEN
				IF (REC.DEFAULT_VALUE <> REC.COLUMN_DEFAULT_2) THEN
					PERFORM COMP.ALTER_ATTRIBUTE(REC.ID, 'DEFAULT VALUE', $1, CUR_SCHEMA.SCHEMA_NAME);
				END IF;
			ELSIF (REC.ATTRIBUTE_TYPE = 'VARCHAR')THEN 
				IF (REC.DEFAULT_VALUE <> SUBSTRING(REC.COLUMN_DEFAULT FROM 1 FOR (LENGTH(REC.COLUMN_DEFAULT)))) THEN
					PERFORM COMP.ALTER_ATTRIBUTE(REC.ID, 'DEFAULT VALUE', $1, CUR_SCHEMA.SCHEMA_NAME);
				END IF;
			ELSIF (REC.ATTRIBUTE_TYPE = 'BOOLEAN')THEN 
				IF (UPPER(REC.DEFAULT_VALUE) <> REC.COLUMN_DEFAULT_2) THEN
					PERFORM COMP.ALTER_ATTRIBUTE(REC.ID, 'DEFAULT VALUE', $1, CUR_SCHEMA.SCHEMA_NAME);
				END IF;
			END IF;
		ELSE
			IF (REC.ATTRIBUTE_TYPE = 'TIMESTAMP') THEN
				IF ((REC.DEFAULT_VALUE = 'CURRENT_TIMESTAMP' AND REC.COLUMN_DEFAULT_2 = '') 
				OR (REC.DEFAULT_VALUE = '' AND REC.COLUMN_DEFAULT_2 = 'NOW()')) THEN
					PERFORM COMP.ALTER_ATTRIBUTE(REC.ID, 'DEFAULT VALUE', $1, CUR_SCHEMA.SCHEMA_NAME);
				END IF;
			ELSIF (REC.ATTRIBUTE_TYPE = 'DATE') THEN
				IF ((REC.DEFAULT_VALUE = 'CURRENT_DATE' AND REC.COLUMN_DEFAULT_2 = '') 
				OR (REC.DEFAULT_VALUE = '' AND REC.COLUMN_DEFAULT_2 = UPPER('(''now''::text)::date'))) THEN
					PERFORM COMP.ALTER_ATTRIBUTE(REC.ID, 'DEFAULT VALUE', $1, CUR_SCHEMA.SCHEMA_NAME);
				END IF;
			END IF;
		END IF;
	END LOOP;
	PERFORM COMP.WRITE_TEXT_LOG(2,62,CLOCK_TIMESTAMP() - STARTTIME, STARTTIME);
	
	IF (CUR_SCHEMA.SCHEMA_NAME = 'DATA') THEN
		FOR REC IN
			SELECT 'DROP FUNCTION ' || NS.NSPNAME || '.' || PRONAME 
					|| '(' || OIDVECTORTYPES(PROARGTYPES) || ');' AS SCRIPT
			FROM 	PG_PROC INNER JOIN PG_NAMESPACE NS ON (PG_PROC.PRONAMESPACE = NS.OID)
			WHERE 	UPPER(NS.NSPNAME) = CUR_SCHEMA.SCHEMA_NAME  
			AND		PRORETTYPE <> 2279 --EXCLUINDO TRIGGER FUNCTION
			ORDER BY PRONAME
		LOOP
			PERFORM COMP.EXECUTE_STATEMENT(REC.SCRIPT);
		END LOOP;
	END IF;
	
	STARTTIME := CLOCK_TIMESTAMP();
	PERFORM COMP.SET_MASTER_LOG_ID(CUR_SCHEMA.ID);	
	
	FOR REC IN
		SELECT 	A.ID,
				'1' AS PRIORITY
		FROM	COMP.SYSTEM_OBJECT A,
				COMP.DOMAIN_VALUE B
		WHERE	A.ID_APPLICATION = $1
		AND		A.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND		A.ID_DOMAIN_VALUE_TYPE = B.ID
		AND		A.FL_ACTIVE IS TRUE
		AND		UPPER(COMP.GET_EXPRESSION_TEXT(B.ID_EXPRESSION, $1)) = 'TYPE'
		AND	UPPER(A.NAME) NOT IN (
			SELECT 	UPPER(USER_DEFINED_TYPE_NAME)
			FROM 	INFORMATION_SCHEMA.USER_DEFINED_TYPES
			WHERE	UPPER(USER_DEFINED_TYPE_SCHEMA) = CUR_SCHEMA.SCHEMA_NAME)
		UNION
		SELECT 	A.ID,
				'2' AS PRIORITY
		FROM	COMP.SYSTEM_OBJECT A,
				COMP.DOMAIN_VALUE B
		WHERE	A.ID_APPLICATION = $1
		AND		A.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND		A.ID_DOMAIN_VALUE_TYPE = B.ID
		AND		A.FL_ACTIVE IS TRUE
		AND		UPPER(COMP.GET_EXPRESSION_TEXT(B.ID_EXPRESSION, $1)) IN ('FUNCTION','TRIGGER FUNCTION')
		UNION
		SELECT 	A.ID,
				'3' AS PRIORITY
		FROM	COMP.SYSTEM_OBJECT A,
				COMP.DOMAIN_VALUE B
		WHERE	A.ID_APPLICATION = $1
		AND		A.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND		A.ID_DOMAIN_VALUE_TYPE = B.ID
		AND		A.FL_ACTIVE IS TRUE
		AND		UPPER(COMP.GET_EXPRESSION_TEXT(B.ID_EXPRESSION, $1)) = 'TRIGGER'
		AND	UPPER(A.NAME) NOT IN (
			SELECT 	UPPER(TRIGGER_NAME)
			FROM 	INFORMATION_SCHEMA.TRIGGERS 
			WHERE	UPPER(TRIGGER_SCHEMA) = CUR_SCHEMA.SCHEMA_NAME)

		ORDER BY 2
	LOOP
		PERFORM COMP.CREATE_OBJECT(REC.ID, $1, CUR_SCHEMA.SCHEMA_NAME);
	END LOOP;
	PERFORM COMP.WRITE_TEXT_LOG(2,64,CLOCK_TIMESTAMP() - STARTTIME, STARTTIME);
	
	
	
	STARTTIME := CLOCK_TIMESTAMP();
	PERFORM COMP.SET_MASTER_LOG_ID(CUR_SCHEMA.ID);	

	FOR REC IN
		SELECT 	A.ID
		FROM	COMP.SYSTEM_SEQUENCE A,
			COMP.SYSTEM_TABLE B
		WHERE	A.ID_TABLE = B.ID
		AND		B.ID_APPLICATION = 1
		AND		B.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND		A.NAME NOT IN (
			SELECT 	UPPER(CLS.RELNAME)
			FROM 	PG_CLASS CLS, PG_NAMESPACE NSP
			WHERE 	NSP.OID = CLS.RELNAMESPACE
			AND  	UPPER(NSP.NSPNAME) = CUR_SCHEMA.SCHEMA_NAME)
		UNION
		SELECT 	A.ID
		FROM	COMP.SYSTEM_SEQUENCE A
		WHERE	A.ID_DATABASE_SCHEMA = CUR_SCHEMA.ID
		AND	A.NAME NOT IN (
			SELECT 	UPPER(CLS.RELNAME)
			FROM 	PG_CLASS CLS, PG_NAMESPACE NSP
			WHERE 	NSP.OID = CLS.RELNAMESPACE
			AND  	UPPER(NSP.NSPNAME) = CUR_SCHEMA.SCHEMA_NAME)
	LOOP
		PERFORM COMP.CREATE_SEQUENCE(REC.ID, $1, CUR_SCHEMA.SCHEMA_NAME);
	END LOOP;
	PERFORM COMP.WRITE_TEXT_LOG(2,65,CLOCK_TIMESTAMP() - STARTTIME, STARTTIME);
	
	PERFORM COMP.EXECUTE_SCRIPT_VERSION($1,NULL);
	
END LOOP;	

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
