CREATE OR REPLACE FUNCTION comp.create_integrity(id_table numeric, id_application numeric, nm_schema character varying, id_integrity numeric)
  RETURNS void AS
$BODY$
DECLARE

REC 						RECORD;
SUB_REC						RECORD;
TEXT_W 						VARCHAR(4000) := '';
TABLE_NAME_W 				VARCHAR(50);
INVALID_V					BOOLEAN = FALSE;
INVALID_INTEGRITY_NAME_V	VARCHAR(100);
INVALID_ORIG_ATT_NAME_V		VARCHAR(100);
INVALID_ORIG_TYPE_V		VARCHAR(100);
INVALID_REF_TYPE_V			VARCHAR(100);

BEGIN
	SELECT 	CASE WHEN COUNT(1) > 0 THEN TRUE ELSE FALSE END AS RES,
		FOO.INTEGRITY_NAME,
		FOO.ORIG_ATT_NAME,
		FOO.ORIG_TYPE,
		FOO.REF_TYPE
	INTO INVALID_V,
		INVALID_INTEGRITY_NAME_V,
		INVALID_ORIG_ATT_NAME_V,
		INVALID_ORIG_TYPE_V,
		INVALID_REF_TYPE_V	
	FROM (
	SELECT 	IA.ID_TABLE_ATTRIBUTE_ORIGIN,
			TAO.ID_DOMAIN_VALUE_TYPE ID_ORIG_TYPE,
			TAO.NAME ORIG_ATT_NAME,
			COMP.GET_EXPRESSION_TEXT(DVO.ID_EXPRESSION) ORIG_TYPE, 
			IA.ID_TABLE_ATTRIBUTE_REFERENCE,
			TAR.ID_DOMAIN_VALUE_TYPE ID_REF_TYPE,
			TAR.NAME REF_ATT_NAME,
			COMP.GET_EXPRESSION_TEXT(DVR.ID_EXPRESSION) REF_TYPE, 
			I.NAME INTEGRITY_NAME
	FROM	COMP.INTEGRITY_ATTRIBUTE IA,
			COMP.INTEGRITY I,
			COMP.TABLE_ATTRIBUTE TAO,
			COMP.TABLE_ATTRIBUTE TAR,
			COMP.DOMAIN_VALUE DVO,
			COMP.DOMAIN_VALUE DVR
	WHERE	IA.ID_INTEGRITY = I.ID
	AND		IA.ID_TABLE_ATTRIBUTE_ORIGIN = TAO.ID
	AND		IA.ID_TABLE_ATTRIBUTE_REFERENCE = TAR.ID
	AND		DVO.ID = TAO.ID_DOMAIN_VALUE_TYPE
	AND		DVR.ID = TAR.ID_DOMAIN_VALUE_TYPE
	AND		TAR.NAME = TAO.NAME
	AND		TAR.ID_DOMAIN_VALUE_TYPE NOT IN (1,12)
	AND		TAO.ID_DOMAIN_VALUE_TYPE NOT IN (1,12)
	AND		IA.ID_INTEGRITY = $1) AS FOO
	WHERE 	FOO.ORIG_TYPE <> FOO.REF_TYPE
	GROUP BY 2, 3, 4, 5;

IF (INVALID_V IS TRUE) THEN
	TEXT_W := INVALID_INTEGRITY_NAME_V || ' (' || $4 || ') ' || COMP.GET_EXPRESSION_TEXT(70) || INVALID_ORIG_ATT_NAME_V || '( "' || INVALID_ORIG_TYPE_V || '" / "' || INVALID_REF_TYPE_V || '" ).';
	PERFORM COMP.WRITE_STRUCTURE_ERROR_LOG(138,TEXT_W,NULL,NULL);
	TEXT_W := '';
ELSE
	SELECT 	A.NAME 
	INTO 	TABLE_NAME_W 
	FROM 	COMP.SYSTEM_TABLE A 
	WHERE 	A.ID = $1;

	FOR REC IN
		SELECT 	A.ID,
				A.NAME,
				COMP.GET_EXPRESSION_TEXT(B.ID_EXPRESSION, $2) INT_TYPE
		FROM  	COMP.INTEGRITY A,
				COMP.DOMAIN_VALUE B,
				COMP.INTEGRITY_ATTRIBUTE D,
				COMP.TABLE_ATTRIBUTE E,
				COMP.SYSTEM_TABLE F
		WHERE	A.ID_DOMAIN_VALUE_TYPE = B.ID
		AND		D.ID_INTEGRITY = A.ID
		AND		E.ID = D.ID_TABLE_ATTRIBUTE_ORIGIN
		AND		E.ID_TABLE = F.ID
		AND		F.ID = $1
		AND		A.ID = $4
		AND		F.ID_APPLICATION = $2
		GROUP BY	1, 2, 3
		ORDER BY 	3 DESC	
	LOOP
		TEXT_W := 'ALTER TABLE ' || $3 || '.' || TABLE_NAME_W || ' ';

		IF (REC.INT_TYPE = 'PK') THEN --PRIMARY KEY
			TEXT_W := TEXT_W || ' ADD CONSTRAINT ' || REC.NAME || ' PRIMARY KEY (';
				
			FOR SUB_REC IN
			SELECT 	B.NAME
			FROM 	COMP.INTEGRITY_ATTRIBUTE A,
					COMP.TABLE_ATTRIBUTE B
			WHERE 	A.ID_INTEGRITY = REC.ID
			AND		A.ID_TABLE_ATTRIBUTE_ORIGIN = B.ID
			LOOP
				TEXT_W := TEXT_W || SUB_REC.NAME || ', ';
			END LOOP;
			TEXT_W := SUBSTRING(TEXT_W FROM 1 FOR (CHAR_LENGTH(TEXT_W) -2)) || ') ';
		
		ELSIF (REC.INT_TYPE = 'UK') THEN --UNIQUE KEY
			TEXT_W := TEXT_W || ' ADD CONSTRAINT ' || REC.NAME || ' UNIQUE (';
				
			FOR SUB_REC IN
			SELECT 	B.NAME
			FROM 	COMP.INTEGRITY_ATTRIBUTE A,
					COMP.TABLE_ATTRIBUTE B
			WHERE 	A.ID_INTEGRITY = REC.ID
			AND		A.ID_TABLE_ATTRIBUTE_ORIGIN = B.ID
			LOOP
				TEXT_W := TEXT_W || SUB_REC.NAME || ', ';
			END LOOP;
			TEXT_W := SUBSTRING(TEXT_W FROM 1 FOR (CHAR_LENGTH(TEXT_W) -2)) || ') ';

		ELSIF (REC.INT_TYPE = 'FK') THEN
			TEXT_W := TEXT_W || ' ADD CONSTRAINT ' || REC.NAME || ' FOREIGN KEY (';
		
			FOR SUB_REC IN
			SELECT 	DISTINCT B.NAME
			FROM 	COMP.INTEGRITY_ATTRIBUTE A,
					COMP.TABLE_ATTRIBUTE B
			WHERE 	A.ID_INTEGRITY = REC.ID
			AND		A.ID_TABLE_ATTRIBUTE_ORIGIN = B.ID
			ORDER BY B.NAME
			LOOP
				TEXT_W := TEXT_W || SUB_REC.NAME || ', ';
			END LOOP;
			TEXT_W := SUBSTRING(TEXT_W FROM 1 FOR (CHAR_LENGTH(TEXT_W) -2)) || ') REFERENCES ';
		
			FOR SUB_REC IN
			SELECT 	MAX(C.NAME) TAB_NAME,
					MAX(UPPER(IDS.NAME)) SCH_NAME
			FROM 	COMP.INTEGRITY_ATTRIBUTE A,
					COMP.TABLE_ATTRIBUTE B,
					COMP.SYSTEM_TABLE C,
					COMP.DATABASE_SCHEMA IDS
			WHERE 	A.ID_INTEGRITY = REC.ID
			AND		A.ID_TABLE_ATTRIBUTE_REFERENCE = B.ID
			AND		B.ID_TABLE = C.ID
			AND		C.ID_DATABASE_SCHEMA = IDS.ID
			LOOP
				TEXT_W := TEXT_W || SUB_REC.SCH_NAME || '.' || SUB_REC.TAB_NAME || '(';
			END LOOP;
			
			FOR SUB_REC IN
			SELECT 	DISTINCT B.NAME ATT_NAME
			FROM 	COMP.INTEGRITY_ATTRIBUTE A,
					COMP.TABLE_ATTRIBUTE B
			WHERE 	A.ID_INTEGRITY = REC.ID
			AND		A.ID_TABLE_ATTRIBUTE_REFERENCE = B.ID
			ORDER BY B.NAME
			LOOP
				TEXT_W := TEXT_W || SUB_REC.ATT_NAME || ', ';
			END LOOP;
			
			TEXT_W := SUBSTRING(TEXT_W FROM 1 FOR (CHAR_LENGTH(TEXT_W) -2)) || ') ';
		END IF;
		
		TEXT_W := SUBSTRING(TEXT_W FROM 1 FOR (CHAR_LENGTH(TEXT_W) -2));
	END LOOP;

	TEXT_W := TEXT_W || ');';

	PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);
END IF;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
