CREATE OR REPLACE FUNCTION comp.retro_alimentation(id_application_p numeric)
  RETURNS void AS
$BODY$
DECLARE
REC_SCHEMA 	RECORD;
REC 		RECORD;
SUBREC		RECORD;
TEXT_W 		TEXT;
OBJ_TEXT_W	TEXT;
TEXT_V		TEXT;
NEXT_ID		NUMERIC(10,0);
NEXT_SUB_ID	NUMERIC(10,0);
VPARAM_TYPE NUMERIC(10,0);
ID_T_A_ORIG NUMERIC(10,0);
ID_T_A_DEST NUMERIC(10,0);
ATT_SIZE	INTEGER;
DEC_SIZE	INTEGER;
COUNT_W		INTEGER;
CONTADOR_W	INTEGER := 0;

BEGIN

SELECT 	COUNT(1)
INTO	CONTADOR_W
FROM	PG_STAT_ACTIVITY
WHERE	POSITION('RETRO_ALIMENTATION' IN UPPER(QUERY)) > 0
AND		UPPER(STATE) = 'ACTIVE';

IF (COUNT_W > 1) THEN
	RAISE EXCEPTION USING MESSAGE = COMP.GET_EXPRESSION_TEXT(35);
END IF;

DROP TABLE IF EXISTS TB_LOG;
CREATE TEMP TABLE TB_LOG(ID SERIAL, ID_DATABASE_SCHEMA NUMERIC);

FOR REC_SCHEMA IN
	SELECT 	DISTINCT DS.ID AS ID, 
			UPPER(DS.NAME) AS NAME
	FROM 	COMP.DATABASE_SCHEMA DS,
			COMP.APPLICATION_SCHEMA APS
	WHERE 	APS.ID_DATABASE_SCHEMA = DS.ID
	AND		APS.ID_APPLICATION = $1
	ORDER BY DS.ID
LOOP


	FOR REC IN
		SELECT 	UPPER(TABLE_NAME) NM
		FROM 	INFORMATION_SCHEMA.TABLES 
		WHERE 	UPPER(TABLE_SCHEMA) = REC_SCHEMA.NAME
		AND		UPPER(TABLE_NAME) NOT IN
				(SELECT DISTINCT A.NAME
				FROM 	COMP.SYSTEM_TABLE A
				WHERE	ID_DATABASE_SCHEMA = REC_SCHEMA.ID)
	LOOP
		NEXT_ID := nextval('comp.system_table_seq');

		TEXT_W := 'INSERT INTO COMP.SYSTEM_TABLE ';
		TEXT_W := TEXT_W || '(ID,NAME,ID_APPLICATION,NM_CREATION_USER,NM_ALTER_USER,ID_DATABASE_SCHEMA,ID_EXPRESSION_DOCUMENTATION) VALUES (';
		TEXT_W := TEXT_W || NEXT_ID || ',''' || REC.NM || ''','||$1||',''Retro'',''Retro'','||REC_SCHEMA.ID||',2)';

		PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);

	END LOOP;

	FOR REC IN
		SELECT 	DISTINCT ID, UPPER(NAME) NM
		FROM 	COMP.SYSTEM_TABLE
		WHERE	ID_DATABASE_SCHEMA = REC_SCHEMA.ID
	LOOP
		FOR SUBREC IN
			SELECT 	UPPER(COLUMN_NAME) COLUMN_NAME,
					COLUMN_DEFAULT,
					IS_NULLABLE,
					DATA_TYPE,
					COALESCE(CHARACTER_MAXIMUM_LENGTH,0) CHARACTER_MAXIMUM_LENGTH,
					COALESCE(NUMERIC_PRECISION,0) NUMERIC_PRECISION,
					COALESCE(NUMERIC_SCALE,0) NUMERIC_SCALE	
			FROM 	INFORMATION_SCHEMA.COLUMNS
			WHERE 	UPPER(TABLE_SCHEMA) = REC_SCHEMA.NAME
			AND		UPPER(TABLE_NAME) = REC.NM
			AND		UPPER(COLUMN_NAME) NOT IN 
				(	SELECT 	DISTINCT UPPER(A.NAME)
					FROM 	COMP.TABLE_ATTRIBUTE A
					WHERE	A.ID_TABLE = REC.ID)
		LOOP			
			NEXT_ID := nextval('comp.table_attribute_seq');

			ATT_SIZE := 0;
			DEC_SIZE := 0;

			VPARAM_TYPE := COMP.GET_ID_ATTRIBUTE_TYPE(UPPER(SUBREC.DATA_TYPE));

			IF ((VPARAM_TYPE = 99) OR (VPARAM_TYPE IS NULL)) THEN
				RAISE EXCEPTION USING MESSAGE = COMP.GET_EXPRESSION_TEXT(51) || UPPER(SUBREC.DATA_TYPE);
			END IF;

			IF (VPARAM_TYPE = 4) THEN
				IF (SUBREC.CHARACTER_MAXIMUM_LENGTH > 0) THEN
						ATT_SIZE := SUBREC.CHARACTER_MAXIMUM_LENGTH;
				END IF;
			ELSIF (VPARAM_TYPE = 1) THEN
				IF (SUBREC.NUMERIC_PRECISION > 0) THEN
						ATT_SIZE := SUBREC.NUMERIC_PRECISION;
				END IF;		
				IF (SUBREC.NUMERIC_SCALE > 0) THEN
						DEC_SIZE := SUBREC.NUMERIC_SCALE;
				END IF;		
			END IF;

			TEXT_W := 'INSERT INTO COMP.TABLE_ATTRIBUTE ';
			TEXT_W := TEXT_W || '(ID,ID_TABLE,NAME,NM_CREATION_USER,NM_ALTER_USER,ID_EXPRESSION_DOCUMENTATION,';
			TEXT_W := TEXT_W || ' ID_DOMAIN_VALUE_TYPE, VL_DEFAULT, VL_ATTRIBUTE_SIZE, VL_DECIMAL_SIZE, FL_NOT_NULL';
			TEXT_W := TEXT_W || ') VALUES (';
			TEXT_W := TEXT_W || NEXT_ID || ',' || REC.ID ||',''' || SUBREC.COLUMN_NAME || ''',''Retro'',''Retro'',2,';
			TEXT_W := TEXT_W || VPARAM_TYPE || ',';
			
			IF (SUBREC.COLUMN_DEFAULT IS NOT NULL) THEN
				IF ((UPPER(SUBREC.COLUMN_DEFAULT) = UPPER('(''now''::text)::date')) AND (VPARAM_TYPE = 3)) THEN
					TEXT_W := TEXT_W || '''CURRENT_DATE'',';
				ELSIF ((UPPER(SUBREC.COLUMN_DEFAULT) = UPPER('(''now''::text)::timestamp')) AND (VPARAM_TYPE = 2)) THEN
					TEXT_W := TEXT_W || '''CURRENT_TIMESTAMP'',';
				ELSE
					TEXT_W := TEXT_W || '''' || REPLACE(SUBREC.COLUMN_DEFAULT,'''','''''') || ''',';
				END IF;
			ELSE
				TEXT_W := TEXT_W || 'NULL,';
			END IF;
			
			IF (ATT_SIZE > 0) THEN
				TEXT_W := TEXT_W || ATT_SIZE || ',';
			ELSE
				TEXT_W := TEXT_W || 'NULL,';
			END IF;

			IF (DEC_SIZE > 0) THEN
				TEXT_W := TEXT_W || DEC_SIZE || ',';
			ELSE
				TEXT_W := TEXT_W || 'NULL,';
			END IF;

			IF (SUBREC.IS_NULLABLE = 'YES') THEN
				TEXT_W := TEXT_W || 'FALSE)';
			ELSE
				TEXT_W := TEXT_W || 'TRUE)';
			END IF;

			PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);

		END LOOP;
	END LOOP;


	FOR REC IN
	SELECT	DISTINCT UPPER(TC.CONSTRAINT_NAME) AS NM, 
			UPPER(TC.CONSTRAINT_TYPE) AS TYPE
	FROM 	INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC 
	WHERE 	UPPER(TC.CONSTRAINT_SCHEMA) = REC_SCHEMA.NAME
	AND 	UPPER(TC.CONSTRAINT_TYPE) IN ('FOREIGN KEY','PRIMARY KEY','UNIQUE')
	AND 	UPPER(TC.CONSTRAINT_NAME) NOT IN 
		(SELECT 	DISTINCT UPPER(I.NAME) 
		FROM	COMP.INTEGRITY I
		WHERE	I.ID_DATABASE_SCHEMA = REC_SCHEMA.ID)
	LOOP
		NEXT_ID := nextval('comp.integrity_seq');

		SELECT CASE
		WHEN REC.TYPE = 'FOREIGN KEY' THEN 10
		WHEN REC.TYPE = 'PRIMARY KEY' THEN 9
		WHEN REC.TYPE = 'UNIQUE' THEN 11
		ELSE 99
		END
		INTO VPARAM_TYPE;

		IF (VPARAM_TYPE = 99) THEN
			RAISE EXCEPTION USING MESSAGE = 'INCORREPT PARAM TYPE: ' || REC.TYPE;
		END IF;

		TEXT_W := 'INSERT INTO COMP.INTEGRITY ';
		TEXT_W := TEXT_W || '(ID,NAME,NM_CREATION_USER,NM_ALTER_USER,ID_DOMAIN_VALUE_TYPE,ID_DATABASE_SCHEMA,ID_APPLICATION)';
		TEXT_W := TEXT_W || ' VALUES	(';
		TEXT_W := TEXT_W || NEXT_ID || ',''' || REC.NM || ''',''Retro'',''Retro'',' || VPARAM_TYPE || ','||REC_SCHEMA.ID||','||$1||')';

		PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);

		FOR SUBREC IN
			select 
				att2.attname as ORIGIN_COLUMN_NAME, 
				cl.relname as FOREIGN_TABLE_NAME, 
				att.attname as FOREIGN_COLUMN_NAME,
				con.child_table as ORIGIN_TABLE_NAME,
				con.child_schema as ORIGIN_SCHEMA_NAME,
				NS2.NSPNAME as FOREIGN_SCHEMA_NAME,
				con.type as TYPE
			from
			   (select 
					unnest(con1.conkey) as "parent", 
					unnest(con1.confkey) as "child", 
					con1.conname as constraint_name,
					con1.confrelid, 
					con1.conrelid,
					cl.relname as child_table,
					ns.nspname as child_schema,
					con1.contype as type
				from 
					pg_class cl
					join pg_namespace ns on cl.relnamespace = ns.oid
					join pg_constraint con1 on con1.conrelid = cl.oid
				where  con1.contype = 'f'
			   ) con
			   join pg_attribute att on
				   att.attrelid = con.confrelid and att.attnum = con.child
			   join pg_class cl on
				   cl.oid = con.confrelid
			   join pg_attribute att2 on
				   att2.attrelid = con.conrelid and att2.attnum = con.parent
				JOIN PG_NAMESPACE NS2 ON CL.RELNAMESPACE = NS2.OID
				   WHERE UPPER(CON.CHILD_SCHEMA) = REC_SCHEMA.NAME
					AND	UPPER(CON.CONSTRAINT_NAME) = upper(REC.NM)
			UNION 
			select 
				att2.attname as ORIGIN_COLUMN_NAME, 
				null as FOREIGN_TABLE_NAME, 
				null as FOREIGN_COLUMN_NAME,
				con.child_table as ORIGIN_TABLE_NAME,
				con.child_schema as ORIGIN_SCHEMA_NAME,
				null as FOREIGN_SCHEMA_NAME,
				con.type as TYPE
			from
			   (select 
					unnest(con1.conkey) as "parent", 
					null as "child", 
					con1.conname as constraint_name,
					con1.confrelid, 
					con1.conrelid,
					cl.relname as child_table,
					ns.nspname as child_schema,
					con1.contype as type
				from 
					pg_class cl
					join pg_namespace ns on cl.relnamespace = ns.oid
					join pg_constraint con1 on con1.conrelid = cl.oid
				where  con1.contype in ('u','p')
			   ) con
			   join pg_attribute att2 on
				   att2.attrelid = con.conrelid and att2.attnum = con.parent
				   WHERE UPPER(CON.CHILD_SCHEMA) = REC_SCHEMA.NAME
					AND	UPPER(CON.CONSTRAINT_NAME) = upper(REC.NM)
					ORDER BY 7,4,1
		LOOP
			NEXT_SUB_ID := nextval('comp.integrity_attribute_seq');

			TEXT_W := 'INSERT INTO COMP.INTEGRITY_ATTRIBUTE ';
			TEXT_W := TEXT_W || '(ID,ID_INTEGRITY,NM_CREATION_USER,NM_ALTER_USER,ID_TABLE_ATTRIBUTE_ORIGIN, ';
			TEXT_W := TEXT_W || ' ID_TABLE_ATTRIBUTE_REFERENCE)';
			TEXT_W := TEXT_W || ' VALUES (';
			TEXT_W := TEXT_W || NEXT_SUB_ID || ',' || NEXT_ID || ',''Retro'',''Retro'',';

			SELECT	TA.ID
			INTO	ID_T_A_ORIG
			FROM	COMP.TABLE_ATTRIBUTE TA,
					COMP.SYSTEM_TABLE ST
			WHERE	ST.ID = TA.ID_TABLE	
			AND		ST.ID_DATABASE_SCHEMA = (SELECT ID FROM COMP.DATABASE_SCHEMA WHERE UPPER(NAME) = UPPER(SUBREC.ORIGIN_SCHEMA_NAME))
			AND		UPPER(TA.NAME) = UPPER(SUBREC.ORIGIN_COLUMN_NAME)
			AND		UPPER(ST.NAME) = UPPER(SUBREC.ORIGIN_TABLE_NAME);

			IF (ID_T_A_ORIG IS NULL) THEN
				RAISE EXCEPTION USING MESSAGE = 'INTEGRITY_NAME: '||COALESCE(REC.NM,'')
				|| ' -INTEGRITY_TYPE: '||COALESCE(REC.TYPE,'')
				|| ' -ORIGIN_SCHEMA_NAME: ' || COALESCE(SUBREC.ORIGIN_SCHEMA_NAME,'')
				|| ' -ID_DATABASE_SCHEMA: ' || COALESCE(REC_SCHEMA.ID ,0)
				|| ' -ORIGIN_COLUMN_NAME: '|| COALESCE(SUBREC.ORIGIN_COLUMN_NAME,'')
				|| ' -ORIGIN_TABLE_NAME: '|| COALESCE(SUBREC.ORIGIN_TABLE_NAME ,'')
				|| ' -FOREIGN_TABLE_NAME: '|| COALESCE(SUBREC.FOREIGN_TABLE_NAME,'')
				|| ' -FOREIGN_COLUMN_NAME '|| COALESCE(SUBREC.FOREIGN_COLUMN_NAME,'')
				|| ' -FOREIGN_SCHEMA_NAME '|| COALESCE(SUBREC.FOREIGN_SCHEMA_NAME,'');
			END IF;

			IF ((VPARAM_TYPE = 9) OR (VPARAM_TYPE = 11)) THEN
				TEXT_W := TEXT_W || ID_T_A_ORIG || ',NULL)';
			ELSIF (VPARAM_TYPE = 10) THEN
				SELECT	TA.ID
				INTO	ID_T_A_DEST
				FROM	COMP.TABLE_ATTRIBUTE TA,
						COMP.SYSTEM_TABLE ST
				WHERE	ST.ID = TA.ID_TABLE	
				AND		ST.ID_DATABASE_SCHEMA = (SELECT ID FROM COMP.DATABASE_SCHEMA WHERE UPPER(NAME) = UPPER(SUBREC.FOREIGN_SCHEMA_NAME))
				AND		UPPER(TA.NAME) = UPPER(SUBREC.FOREIGN_COLUMN_NAME)
				AND		UPPER(ST.NAME) = UPPER(SUBREC.FOREIGN_TABLE_NAME);

				TEXT_W := TEXT_W || ID_T_A_ORIG || ',' || ID_T_A_DEST || ')';
			END IF;

			PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);

		END LOOP;
	END LOOP;

	FOR REC IN
		SELECT UPPER(NSP.NSPNAME) AS SEQUENCE_SCHEMA,
			   UPPER(CLS.RELNAME) AS SEQUENCE_NAME,
			   UPPER(NSP2.NSPNAME) AS DEPENDENT_SCHEMA,
			   UPPER(T.RELNAME) AS RELATED_TABLE
		FROM 	PG_CLASS CLS
		JOIN 	PG_NAMESPACE NSP ON NSP.OID = CLS.RELNAMESPACE
		JOIN 	PG_DEPEND D ON D.OBJID = CLS.OID 
		JOIN 	PG_CLASS T ON D.REFOBJID = T.OID 
		JOIN 	PG_NAMESPACE NSP2 ON NSP2.OID = T.RELNAMESPACE
		WHERE 	UPPER(NSP.NSPNAME) = REC_SCHEMA.NAME
		  AND 	CLS.RELKIND = 'S'
		  AND 	UPPER(CLS.RELNAME) NOT IN 
		  ( 	SELECT 	DISTINCT A.NAME 
				FROM 	COMP.SYSTEM_SEQUENCE A						
				WHERE	A.ID_DATABASE_SCHEMA = REC_SCHEMA.ID)				
		UNION ALL
		SELECT UPPER(NSP.NSPNAME) AS SEQUENCE_SCHEMA,
			   UPPER(CLS.RELNAME) AS SEQUENCE_NAME,
			   NULL AS DEPENDENT_SCHEMA,
			   NULL AS RELATED_TABLE
		FROM 	PG_CLASS CLS
		JOIN 	PG_NAMESPACE NSP ON NSP.OID = CLS.RELNAMESPACE
		WHERE 	UPPER(NSP.NSPNAME) = REC_SCHEMA.NAME
		  AND 	CLS.RELKIND = 'S'
		  AND 	UPPER(CLS.RELNAME) NOT IN 
		  ( 	SELECT 	DISTINCT A.NAME 
				FROM 	COMP.SYSTEM_SEQUENCE A						
				WHERE	A.ID_DATABASE_SCHEMA = REC_SCHEMA.ID)
		  AND	CLS.OID NOT IN (
				SELECT CL.OID
				FROM	PG_CLASS CL
				JOIN 	PG_DEPEND D ON D.OBJID = CL.OID
				WHERE 1 = (SELECT COUNT(1) FROM PG_CLASS WHERE OID = D.REFOBJID))
		ORDER BY 1,2
	LOOP
		NEXT_ID := nextval('comp.system_sequence_seq');

		IF (POSITION('_SEQ' IN UPPER(REC.SEQUENCE_NAME))>0) THEN
		
			SELECT	TA.ID
			INTO	ID_T_A_DEST
			FROM	COMP.SYSTEM_TABLE ST,
					COMP.TABLE_ATTRIBUTE TA,
					COMP.INTEGRITY_ATTRIBUTE IA ,
					COMP.INTEGRITY I
			WHERE	ST.ID_DATABASE_SCHEMA = REC_SCHEMA.ID
			AND	  	TA.ID_TABLE = ST.ID
			AND 	IA.ID_TABLE_ATTRIBUTE_ORIGIN = TA.ID
			AND 	I.ID = IA.ID_INTEGRITY 
			AND 	I.ID_DOMAIN_VALUE_TYPE = 9
			AND		UPPER(ST.NAME) = UPPER(REPLACE(UPPER(REC.SEQUENCE_NAME),'_SEQ',''));
		
		ELSE
			IF (COALESCE(REC.RELATED_TABLE,'') <> '') THEN
				SELECT	ST.ID
				INTO	ID_T_A_DEST
				FROM	COMP.SYSTEM_TABLE ST,
						COMP.DATABASE_SCHEMA DS
				WHERE	DS.ID = ST.ID_DATABASE_SCHEMA
				AND		UPPER(DS.NAME) = REC.DEPENDENT_SCHEMA
				AND		UPPER(ST.NAME) = REC.RELATED_TABLE;
			END IF;	
		END IF;

		TEXT_W := 'INSERT INTO COMP.SYSTEM_SEQUENCE ';
		TEXT_W := TEXT_W || '(ID,ID_APPLICATION,NAME,ID_TABLE,ID_TABLE_ATTRIBUTE,NM_CREATION_USER,NM_ALTER_USER,ID_DATABASE_SCHEMA) VALUES (';
		TEXT_W := TEXT_W || NEXT_ID || ',' || $1 || ',' || '''' || REC.SEQUENCE_NAME || '''' || ',' ; 

		IF (COALESCE(REC.RELATED_TABLE,'') <> '') THEN		
			TEXT_W := TEXT_W || ID_T_A_DEST || ',';
		ELSE
			TEXT_W := TEXT_W || 'NULL,';
		END IF;

		IF (COALESCE(ID_T_A_DEST,0) <> 0) THEN		
			TEXT_W := TEXT_W || ID_T_A_DEST || ',';
		ELSE
			TEXT_W := TEXT_W || 'NULL,';
		END IF;

		TEXT_W := TEXT_W || '''Retro'',''Retro'','||REC_SCHEMA.ID||')';

		PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);
	END LOOP;

	FOR REC IN
		SELECT  DISTINCT P.OID, UPPER(P.PRONAME) NM,
		CASE WHEN STRPOS(UPPER(PG_GET_FUNCTIONDEF(P.OID)), 'RETURNS TRIGGER') > 0 THEN 'TRIGGER' ELSE 'FUNCTION' 
			END AS OBJ_TYPE,
			COALESCE((SELECT ID FROM COMP.DOMAIN_VALUE WHERE UPPER(COMP.GET_EXPRESSION_TEXT(ID_EXPRESSION)) = UPPER(T.TYPNAME)),0) AS ID_RETURN,
			COALESCE(SO.ID,0) AS OBJ_ID,
			COALESCE(SO.ID_DOMAIN_VALUE_RETURN_TYPE,0) AS RET_TYPE_ID
		FROM    PG_CATALOG.PG_NAMESPACE N
		JOIN    PG_CATALOG.PG_PROC P
		ON      P.PRONAMESPACE = N.OID
		JOIN	PG_CATALOG.PG_TYPE T
		ON		P.PRORETTYPE = T.OID
		LEFT JOIN COMP.SYSTEM_OBJECT SO
		ON (UPPER(SO.NAME) = UPPER(P.PRONAME)
		AND SO.ID_DATABASE_SCHEMA = REC_SCHEMA.ID)
		WHERE   UPPER(N.NSPNAME) = REC_SCHEMA.NAME
		AND		UPPER(P.PRONAME) NOT LIKE 'DIC_%'
		
	LOOP
		IF (REC.OBJ_ID = 0) THEN
			NEXT_ID := nextval('comp.system_object_seq');

			SELECT PG_GET_FUNCTIONDEF(REC.OID) INTO OBJ_TEXT_W;

			TEXT_W := 'INSERT INTO COMP.SYSTEM_OBJECT ';
			TEXT_W := TEXT_W || '(ID,NAME,ID_APPLICATION,NM_CREATION_USER,NM_ALTER_USER, ';
			TEXT_W := TEXT_W || 'DS_OBJECT, ID_DATABASE_SCHEMA, ID_DOMAIN_VALUE_TYPE, ID_DOMAIN_VALUE_RETURN_TYPE';
			TEXT_W := TEXT_W || ') VALUES (';
			TEXT_W := TEXT_W || NEXT_ID || ',' || '''' || REC.NM || '''' || ','||$1||',''Retro'',''Retro'',';
			TEXT_W := TEXT_W || '''' || REPLACE(OBJ_TEXT_W,'''','''''') || ''','||REC_SCHEMA.ID||',';

			IF ((REC.OBJ_TYPE = 'FUNCTION') OR (REC.NM = 'RETRO_ALIMENTATION')) THEN
				TEXT_W := TEXT_W || '13,';
			ELSE
				TEXT_W := TEXT_W || '32,';
			END IF;

			IF (REC.ID_RETURN <> 0) THEN
				TEXT_W := TEXT_W || REC.ID_RETURN;
			ELSE
				TEXT_W := TEXT_W || 'NULL';
			END IF;

			TEXT_W := TEXT_W || ')';
		ELSE
			IF ((REC.RET_TYPE_ID = 0) AND (REC.OBJ_ID <> 0)) THEN
				TEXT_W := 'UPDATE COMP.SYSTEM_OBJECT SET ID_DOMAIN_VALUE_RETURN_TYPE = ' || REC.ID_RETURN || ' WHERE ID = ' || REC.OBJ_ID;
			END IF;
		END IF;
		
		PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);
	END LOOP;

	FOR REC IN
		SELECT DISTINCT UPPER(TRIGGER_NAME) NM, 
				EVENT_OBJECT_TABLE, 
				ACTION_TIMING, 
				ACTION_STATEMENT 
		FROM 	INFORMATION_SCHEMA.TRIGGERS 
		WHERE	UPPER(TRIGGER_SCHEMA) = REC_SCHEMA.NAME
		AND		UPPER(TRIGGER_NAME) NOT IN 
		(	SELECT 	DISTINCT UPPER(O.NAME)
			FROM	COMP.SYSTEM_OBJECT O
			WHERE	O.ID_DATABASE_SCHEMA = REC_SCHEMA.ID
			AND		O.ID_DOMAIN_VALUE_TYPE = 37)
	LOOP
		NEXT_ID := nextval('comp.system_object_seq');

		OBJ_TEXT_W 	:= ' CREATE TRIGGER ' || REC.NM || ' ' || REC.ACTION_TIMING;
		TEXT_V 		:= ' ON ' || REC_SCHEMA.NAME || '.' || REC.EVENT_OBJECT_TABLE || ' FOR EACH ROW ' || REC.ACTION_STATEMENT;
		TEXT_W 		:= '';
		FOR SUBREC IN
			SELECT 	DISTINCT UPPER(EVENT_MANIPULATION) EVENT_MANIPULATION
			FROM 	INFORMATION_SCHEMA.TRIGGERS 
			WHERE	UPPER(TRIGGER_NAME) = REC.NM
		LOOP
			TEXT_W := TEXT_W || SUBREC.EVENT_MANIPULATION || ' OR ';
		END LOOP;

		TEXT_W := SUBSTRING(TEXT_W FROM 1 FOR LENGTH(TEXT_W)-3);

		OBJ_TEXT_W := OBJ_TEXT_W || ' ' || TEXT_W || ' ' || TEXT_V;

		TEXT_W := 'INSERT INTO COMP.SYSTEM_OBJECT ';
		TEXT_W := TEXT_W || '(ID,NAME,ID_APPLICATION,NM_CREATION_USER,NM_ALTER_USER, ';
		TEXT_W := TEXT_W || 'DS_OBJECT, ID_DATABASE_SCHEMA, ID_DOMAIN_VALUE_TYPE';
		TEXT_W := TEXT_W || ') VALUES (';
		TEXT_W := TEXT_W || NEXT_ID || ',' || '''' || REC.NM || '''' || ','||$1||',''Retro'',''Retro'',';
		TEXT_W := TEXT_W || '''' || OBJ_TEXT_W || ''','||REC_SCHEMA.ID||',37)';		

		PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);

	END LOOP;

	FOR REC IN
		SELECT	USER_DEFINED_TYPE_NAME USER_NAME_TYPE,
				USER_DEFINED_TYPE_SCHEMA USER_SCHEMA			
		FROM	INFORMATION_SCHEMA.USER_DEFINED_TYPES
		WHERE	UPPER(USER_DEFINED_TYPE_SCHEMA) = REC_SCHEMA.NAME
		AND		UPPER(USER_DEFINED_TYPE_NAME) NOT LIKE 'T_%'
		AND		UPPER(USER_DEFINED_TYPE_NAME) NOT IN (
				SELECT 	DISTINCT UPPER(O.NAME)
				FROM	COMP.SYSTEM_OBJECT O
				WHERE	O.ID_DATABASE_SCHEMA = REC_SCHEMA.ID
				AND		O.ID_DOMAIN_VALUE_TYPE = 41) 
	LOOP
		NEXT_ID := nextval('comp.system_object_seq');

		OBJ_TEXT_W	:= 'CREATE TYPE ' || REC.USER_SCHEMA || '.' || REC.USER_NAME_TYPE || ' AS ( ';

		SELECT	COUNT(*)
		INTO	COUNT_W
		FROM	(SELECT	DISTINCT
				A.ATTNAME ATTNAME,
				A.ATTLEN ATTLEN,
				FORMAT_TYPE(ATTTYPID, ATTTYPMOD) TYP
			FROM	PG_CLASS C
			INNER JOIN PG_ATTRIBUTE A ON (C.OID = A.ATTRELID::REGCLASS)
			INNER JOIN PG_TYPE T ON (A.ATTTYPID = T.OID)
			INNER JOIN INFORMATION_SCHEMA.USER_DEFINED_TYPES U ON (UPPER(U.USER_DEFINED_TYPE_NAME) = UPPER(C.RELNAME))
			WHERE	A.ATTNUM > 0
			AND		REC.USER_SCHEMA	= U.USER_DEFINED_TYPE_SCHEMA) AS FOO;

		FOR SUBREC IN
			SELECT	DISTINCT
					COALESCE(A.ATTNAME,'2') ATTNAME,
					COALESCE(FORMAT_TYPE(ATTTYPID, ATTTYPMOD),'') TYP
			FROM	PG_CLASS C
			INNER JOIN PG_ATTRIBUTE A ON (C.OID = A.ATTRELID::REGCLASS)
			INNER JOIN PG_TYPE T ON (A.ATTTYPID = T.OID)
			WHERE	UPPER(REC.USER_NAME_TYPE)	= UPPER(C.RELNAME)
			AND		A.ATTNUM > 0 
		LOOP

				CONTADOR_W	:= CONTADOR_W + 1;

				if	(COUNT_W > CONTADOR_W) THEN

					OBJ_TEXT_W	:= OBJ_TEXT_W || SUBREC.ATTNAME || ' ' || SUBREC.TYP || ', ';

				ELSIF	(CONTADOR_W = CONTADOR_W) THEN

					OBJ_TEXT_W	:= OBJ_TEXT_W || SUBREC.ATTNAME || ' ' || SUBREC.TYP || ')';

				END IF;

		END LOOP;

		OBJ_TEXT_W	:= OBJ_TEXT_W;

		TEXT_W	:= ' ';
		TEXT_W := 'INSERT INTO COMP.SYSTEM_OBJECT ';
		TEXT_W := TEXT_W || '(ID,NAME,ID_APPLICATION,NM_CREATION_USER,NM_ALTER_USER, ';
		TEXT_W := TEXT_W || 'DS_OBJECT, ID_DATABASE_SCHEMA, ID_DOMAIN_VALUE_TYPE';
		TEXT_W := TEXT_W || ') VALUES (';
		TEXT_W := TEXT_W || NEXT_ID || ',' || '''' || UPPER(REC.USER_NAME_TYPE) || '''' || ','||$1||',''Retro'',''Retro'',';
		TEXT_W := TEXT_W || '''' || OBJ_TEXT_W || ''','||REC_SCHEMA.ID||',41)';		

		PERFORM COMP.EXECUTE_STATEMENT(TEXT_W);

	END LOOP;

END LOOP;

PERFORM COMP.SYSTEM_OBJECT_PARAMS_REFRESH();
	
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
